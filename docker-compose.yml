networks:
  tgdd-network:
    driver: bridge

volumes:
  postgres_data:
  redis_data:
  elasticsearch_data:

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: tgdd-postgres
    environment:
      POSTGRES_DB: tgdd
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: ${DB_PASSWORD:-password}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backend/scripts:/docker-entrypoint-initdb.d
    networks:
      - tgdd-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d tgdd"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: tgdd-redis
    volumes:
      - redis_data:/data
    networks:
      - tgdd-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5

  # NATS Message Broker
  nats:
    image: nats:2-alpine
    container_name: tgdd-nats
    networks:
      - tgdd-network
    restart: unless-stopped

  # Elasticsearch
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.13.4
    container_name: tgdd-elasticsearch
    environment:
      - discovery.type=single-node
      - cluster.name=tgdd-cluster
      - node.name=tgdd-node
      - bootstrap.memory_lock=true
      - xpack.security.enrollment.enabled=false
      - xpack.security.enabled=false
      - http.cors.enabled=true
      - http.cors.allow-origin="*"
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    ulimits:
      memlock:
        soft: -1
        hard: -1
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    networks:
      - tgdd-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:9200/_cluster/health?wait_for_status=yellow&timeout=60s || exit 1"]
      interval: 30s
      timeout: 60s
      start_period: 60s
      retries: 10

  # Backend Service
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: tgdd-backend
    env_file:
      - .env
      - ./backend/.env
    environment:
      - NODE_ENV=production
      - API_BASE_URL=https://api.tgddclone.duckdns.org
      - FRONTEND_URL=https://app.tgddclone.duckdns.org
      - CORS_ORIGIN=https://app.tgddclone.duckdns.org
      - FRONTEND_ORIGINS=https://app.tgddclone.duckdns.org
    ports:
      - "127.0.0.1:3001:3001"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      elasticsearch:
        condition: service_healthy
    networks:
      - tgdd-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/api/v1/health"]
      interval: 30s
      timeout: 3s
      start_period: 5s
      retries: 3

  # Frontend Service
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: tgdd-frontend
    env_file:
      - .env
      - ./frontend/.env
    environment:
      - NODE_ENV=production
      - NUXT_PUBLIC_API_BASE_URL=https://api.tgddclone.duckdns.org/api/v1
      - NUXT_PUBLIC_BASE_URL=https://app.tgddclone.duckdns.org
    ports:
      - "127.0.0.1:3000:3000"
    depends_on:
      - backend
    networks:
      - tgdd-network
    restart: unless-stopped

  # PgAdmin
  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: tgdd-pgadmin
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_EMAIL:-admin@tgddclone.duckdns.org}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_PASSWORD:-admin123}
      PGADMIN_CONFIG_SERVER_MODE: 'False'
    ports:
      - "127.0.0.1:5050:80"
    depends_on:
      - postgres
    networks:
      - tgdd-network
    restart: unless-stopped