networks:
  tgdd-network:
    driver: bridge

volumes:
  postgres_data:
  redis_data:

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: tgdd-postgres
    environment:
      POSTGRES_DB: tgdd
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: ${DB_PASSWORD:-password}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backend/scripts:/docker-entrypoint-initdb.d
    ports:
      - "5432:5432"
    networks:
      - tgdd-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: tgdd-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - tgdd-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # NATS Message Broker
  nats:
    image: nats:2-alpine
    container_name: tgdd-nats
    ports:
      - "4222:4222"
      - "8222:8222"
    networks:
      - tgdd-network
    restart: unless-stopped

  # Backend API
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: tgdd-backend
    environment:
      - NODE_ENV=production
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_USER=postgres
      - DB_PASSWORD=${DB_PASSWORD:-password}
      - DB_NAME=tgdd
      - DB_DIALECT=postgres
      - TRANSPORTER=nats://nats:4222
      - CACHER=redis://redis:6379
      - JWT_SECRET=${JWT_SECRET:-your-production-jwt-secret}
      # CORS / Frontend origins (read by api.service.js & chat.service.js)
      - FRONTEND_ORIGINS=${FRONTEND_ORIGINS:-http://172.236.138.136,http://tgddclone.duckdns.org:3000}
      - CORS_ORIGIN=${CORS_ORIGIN:-http://tgddclone.duckdns.org:3000}
      - CORS_CREDENTIALS=${CORS_CREDENTIALS:-true}
      - FIREBASE_PROJECT_ID=${FIREBASE_PROJECT_ID}
      - FIREBASE_CLIENT_EMAIL=${FIREBASE_CLIENT_EMAIL}
      - FIREBASE_PRIVATE_KEY=${FIREBASE_PRIVATE_KEY}
      - PORT=3001
    ports:
      - "3001:3001"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      nats:
        condition: service_started
    networks:
      - tgdd-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "node healthcheck.js"]
      interval: 15s
      timeout: 5s
      start_period: 20s
      retries: 5

  # Frontend
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: tgdd-frontend
    environment:
      # Use public origin (through nginx) so the browser never calls Docker service names
      - NUXT_PUBLIC_API_BASE_URL=/api/v1
      - NUXT_PUBLIC_BASE_URL=/
      - NUXT_PUBLIC_FIREBASE_API_KEY=${FIREBASE_API_KEY}
      - NUXT_PUBLIC_FIREBASE_AUTH_DOMAIN=${FIREBASE_AUTH_DOMAIN}
      - NUXT_PUBLIC_FIREBASE_PROJECT_ID=${FIREBASE_PROJECT_ID}
      - NUXT_PUBLIC_FIREBASE_STORAGE_BUCKET=${FIREBASE_STORAGE_BUCKET}
      - NUXT_PUBLIC_FIREBASE_MESSAGING_SENDER_ID=${FIREBASE_MESSAGING_SENDER_ID}
      - NUXT_PUBLIC_FIREBASE_APP_ID=${FIREBASE_APP_ID}
    ports:
      - "3000:3000"
    depends_on:
      backend:
        condition: service_healthy
    networks:
      - tgdd-network
    restart: unless-stopped

  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: tgdd-pgadmin
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@thegioididong.com
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_PASSWORD:-admin}
    ports:
      - "5050:80"
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - tgdd-network
    restart: unless-stopped
    profiles:
      - tools
