version: "3.9"

networks:
  tgdd-network:
    driver: bridge

volumes:
  postgres_data:
  redis_data:
  elasticsearch_data:

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: tgdd-postgres
    env_file:
      - root.env
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backend/scripts:/docker-entrypoint-initdb.d
    ports:
      - "5432:5432"
    networks:
      - tgdd-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER}"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: tgdd-redis
    env_file:
      - root.env
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - tgdd-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # NATS Message Broker
  nats:
    image: nats:2-alpine
    container_name: tgdd-nats
    ports:
      - "4222:4222"
      - "8222:8222"
    networks:
      - tgdd-network
    restart: unless-stopped

  # Elasticsearch Search Engine
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.13.4
    container_name: tgdd-elasticsearch
    env_file:
      - root.env
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    ports:
      - "9200:9200"
      - "9300:9300"
    networks:
      - tgdd-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:9200/_cluster/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Backend API
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: tgdd-backend
    env_file:
      - backend.env
    ports:
      - "3001:3001"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      nats:
        condition: service_started
      elasticsearch:
        condition: service_healthy
    command: >
      sh -c "
        npm start &
        sleep 10 &&
        node scripts/es-import.js &&
        wait
      "
    networks:
      - tgdd-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "node healthcheck.js"]
      interval: 15s
      timeout: 5s
      start_period: 20s
      retries: 5

  # Frontend
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: tgdd-frontend
    env_file:
      - frontend.env
    ports:
      - "3000:3000"
    depends_on:
      backend:
        condition: service_healthy
    networks:
      - tgdd-network
    restart: unless-stopped

  # PGAdmin
  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: tgdd-pgadmin
    env_file:
      - root.env
    ports:
      - "5050:80"
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - tgdd-network
    restart: unless-stopped
