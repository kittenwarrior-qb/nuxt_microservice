name: Simple Deployment

on:
  push:
    branches: [production]
# hi
jobs:
  deploy:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    steps:
      - name: SSH Deploy
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USERNAME }}
          password: ${{ secrets.PASSWORD }}
          port: 22
          timeout: 25m
          script: |
            cd /root/repositories/thegioididong
            # Remove any GitHub-injected extra headers that can break pulls on the VPS
            git config --global --unset-all http.https://github.com/.extraheader || true
            git config --system --unset-all http.https://github.com/.extraheader || true
            git config --local --unset-all http.https://github.com/.extraheader || true
            # Mark repo as safe directory to avoid ownership warnings
            git config --global --add safe.directory /root/services/nuxt_microservice || true
            set -e
            git fetch --all --prune
            git checkout production || git checkout -b production
            # Discard any local changes to ensure clean deployment
            git reset --hard origin/production
            git clean -fd

            # Stop containers gracefully
            docker compose down --timeout 30
            
            # Clean up old images and containers
            docker system prune -f
            
            # Build with no cache
            docker compose build --no-cache
            
            # Start services in stages to avoid timeout
            echo "Starting infrastructure services..."
            docker compose up -d postgres redis nats elasticsearch
            
            # Wait for infrastructure to be healthy
            echo "Waiting for infrastructure services to be ready..."
            timeout 300 bash -c 'until docker compose ps | grep -E "(postgres|redis|elasticsearch)" | grep -q "healthy"; do sleep 5; echo "Waiting for services..."; done'
            
            # Start backend
            echo "Starting backend service..."
            docker compose up -d backend
            
            # Wait for backend to be healthy
            echo "Waiting for backend to be ready..."
            timeout 180 bash -c 'until docker compose ps backend | grep -q "healthy"; do sleep 5; echo "Waiting for backend..."; done'
            
            # Start frontend and pgadmin
            echo "Starting frontend and pgadmin..."
            docker compose up -d frontend pgadmin
            
            # Final status check
            echo "Deployment complete. Container status:"
            docker compose ps
            
            # Cleanup old images
            docker image prune -f
